{"version":3,"file":"index.js","names":["buildOptions","loadBabelOptions","hasShakerMetadata","default","shakerPlugin","configCache","Map","getShakerConfig","only","sortedOnly","sort","key","join","has","get","config","ast","caller","name","targets","node","esmodules","plugins","require","resolve","onlyExports","set","shaker","filename","options","text","babel","transformOptions","babelOptions","transformed","transformSync","metadata","Error","code","__linariaShaker","imports"],"sources":["../src/index.ts"],"sourcesContent":["import type { TransformOptions } from '@babel/core';\n\nimport { buildOptions, loadBabelOptions } from '@linaria/utils';\nimport type { Evaluator } from '@linaria/utils';\n\nimport { hasShakerMetadata } from './plugins/shaker-plugin';\n\nexport { default as shakerPlugin } from './plugins/shaker-plugin';\n\nconst configCache = new Map<string, TransformOptions>();\nconst getShakerConfig = (only: string[] | null): TransformOptions => {\n  const sortedOnly = [...(only ?? [])];\n  sortedOnly.sort();\n  const key = sortedOnly.join('\\0');\n  if (configCache.has(key)) {\n    return configCache.get(key)!;\n  }\n\n  const config = {\n    ast: true,\n    caller: {\n      name: 'linaria',\n    },\n    targets: {\n      node: 'current',\n      esmodules: false,\n    },\n    plugins: [\n      [\n        require.resolve('./plugins/shaker-plugin'),\n        {\n          onlyExports: sortedOnly,\n        },\n      ],\n      require.resolve('@babel/plugin-transform-modules-commonjs'),\n    ],\n  };\n\n  configCache.set(key, config);\n  return config;\n};\n\nconst shaker: Evaluator = (filename, options, text, only, babel) => {\n  const transformOptions = loadBabelOptions(\n    babel,\n    filename,\n    buildOptions(options?.babelOptions, getShakerConfig(only))\n  );\n\n  const transformed = babel.transformSync(text, {\n    ...transformOptions,\n    filename,\n  });\n\n  if (!transformed || !hasShakerMetadata(transformed.metadata)) {\n    throw new Error(`${filename} has no shaker metadata`);\n  }\n\n  return [transformed.code ?? '', transformed.metadata.__linariaShaker.imports];\n};\n\nexport default shaker;\n"],"mappings":"AAEA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,gBAAgB;AAG/D,SAASC,iBAAiB,QAAQ,yBAAyB;AAE3D,SAASC,OAAO,IAAIC,YAAY,QAAQ,yBAAyB;AAEjE,MAAMC,WAAW,GAAG,IAAIC,GAAG,EAA4B;AACvD,MAAMC,eAAe,GAAIC,IAAqB,IAAuB;EACnE,MAAMC,UAAU,GAAG,CAAC,IAAID,IAAI,IAAI,EAAE,CAAC,CAAC;EACpCC,UAAU,CAACC,IAAI,EAAE;EACjB,MAAMC,GAAG,GAAGF,UAAU,CAACG,IAAI,CAAC,IAAI,CAAC;EACjC,IAAIP,WAAW,CAACQ,GAAG,CAACF,GAAG,CAAC,EAAE;IACxB,OAAON,WAAW,CAACS,GAAG,CAACH,GAAG,CAAC;EAC7B;EAEA,MAAMI,MAAM,GAAG;IACbC,GAAG,EAAE,IAAI;IACTC,MAAM,EAAE;MACNC,IAAI,EAAE;IACR,CAAC;IACDC,OAAO,EAAE;MACPC,IAAI,EAAE,SAAS;MACfC,SAAS,EAAE;IACb,CAAC;IACDC,OAAO,EAAE,CACP,CACEC,OAAO,CAACC,OAAO,CAAC,yBAAyB,CAAC,EAC1C;MACEC,WAAW,EAAEhB;IACf,CAAC,CACF,EACDc,OAAO,CAACC,OAAO,CAAC,0CAA0C,CAAC;EAE/D,CAAC;EAEDnB,WAAW,CAACqB,GAAG,CAACf,GAAG,EAAEI,MAAM,CAAC;EAC5B,OAAOA,MAAM;AACf,CAAC;AAED,MAAMY,MAAiB,GAAG,CAACC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,EAAEtB,IAAI,EAAEuB,KAAK,KAAK;EAClE,MAAMC,gBAAgB,GAAG/B,gBAAgB,CACvC8B,KAAK,EACLH,QAAQ,EACR5B,YAAY,CAAC6B,OAAO,EAAEI,YAAY,EAAE1B,eAAe,CAACC,IAAI,CAAC,CAAC,CAC3D;EAED,MAAM0B,WAAW,GAAGH,KAAK,CAACI,aAAa,CAACL,IAAI,EAAE;IAC5C,GAAGE,gBAAgB;IACnBJ;EACF,CAAC,CAAC;EAEF,IAAI,CAACM,WAAW,IAAI,CAAChC,iBAAiB,CAACgC,WAAW,CAACE,QAAQ,CAAC,EAAE;IAC5D,MAAM,IAAIC,KAAK,CAAE,GAAET,QAAS,yBAAwB,CAAC;EACvD;EAEA,OAAO,CAACM,WAAW,CAACI,IAAI,IAAI,EAAE,EAAEJ,WAAW,CAACE,QAAQ,CAACG,eAAe,CAACC,OAAO,CAAC;AAC/E,CAAC;AAED,eAAeb,MAAM"}