{"version":3,"file":"preeval.js","names":["isGlobal","id","nonType","scope","name","node","hasBinding","hasGlobal","forbiddenGlobals","Set","isBrowserGlobal","has","getPropertyName","path","isIdentifier","isStringLiteral","value","preeval","babel","options","types","t","pre","file","log","createCustomDebug","getFileIdx","opts","filename","processors","traverse","Identifier","p","processTemplateExpression","processor","doEvaltimeReplacement","push","CallExpression","enter","isUnnecessaryReactCall","JSXElementsRemover","JSXElement","JSXFragment","MemberExpression","state","obj","get","prop","windowScoped","add","globals","filter","removeWithRelated","MetaProperty","find","parent","isTSTypeReference","parentPath","isUnaryExpression","operator","isTSTypeQuery","isClassProperty","isMemberExpression","key","visitor","post","length","metadata","linaria","replacements","rules","dependencies","expressions","flatMap","map","dependency","ex","linariaPreval","getData","linariaExport","expressionStatement","assignmentExpression","memberExpression","identifier","objectExpression","objectProperty","pushContainer"],"sources":["../../src/plugins/preeval.ts"],"sourcesContent":["/**\n * This file is a babel preset used to transform files inside evaluators.\n * It works the same as main `babel/extract` preset, but do not evaluate lazy dependencies.\n */\nimport type { BabelFile, NodePath, PluginObj } from '@babel/core';\nimport type { Identifier } from '@babel/types';\n\nimport { createCustomDebug } from '@linaria/logger';\nimport type { ExpressionValue } from '@linaria/tags';\nimport type { StrictOptions } from '@linaria/utils';\nimport {\n  JSXElementsRemover,\n  getFileIdx,\n  isUnnecessaryReactCall,\n  nonType,\n  removeWithRelated,\n} from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { IPluginState } from '../types';\nimport processTemplateExpression from '../utils/processTemplateExpression';\n\nexport type PreevalOptions = Pick<\n  StrictOptions,\n  'classNameSlug' | 'displayName' | 'evaluate'\n>;\n\nconst isGlobal = (id: NodePath<Identifier>): boolean => {\n  if (!nonType(id)) {\n    return false;\n  }\n\n  const { scope } = id;\n  const { name } = id.node;\n  return !scope.hasBinding(name) && scope.hasGlobal(name);\n};\n\nconst forbiddenGlobals = new Set([\n  'XMLHttpRequest',\n  'clearImmediate',\n  'clearInterval',\n  'clearTimeout',\n  'document',\n  'fetch',\n  'localStorage',\n  'location',\n  'navigator',\n  'sessionStorage',\n  'setImmediate',\n  'setInterval',\n  'setTimeout',\n  'window',\n]);\n\nconst isBrowserGlobal = (id: NodePath<Identifier>) => {\n  return forbiddenGlobals.has(id.node.name) && isGlobal(id);\n};\n\nconst getPropertyName = (path: NodePath): string | null => {\n  if (path.isIdentifier()) {\n    return path.node.name;\n  }\n\n  if (path.isStringLiteral()) {\n    return path.node.value;\n  }\n\n  return null;\n};\n\nexport default function preeval(\n  babel: Core,\n  options: PreevalOptions\n): PluginObj<IPluginState> {\n  const { types: t } = babel;\n  return {\n    name: '@linaria/babel/preeval',\n    pre(file: BabelFile) {\n      const log = createCustomDebug('preeval', getFileIdx(file.opts.filename!));\n\n      log('start', 'Looking for template literalsâ€¦');\n\n      this.processors = [];\n\n      file.path.traverse({\n        Identifier: (p) => {\n          processTemplateExpression(p, file.opts, options, (processor) => {\n            processor.doEvaltimeReplacement();\n            this.processors.push(processor);\n          });\n        },\n      });\n\n      log('start', 'Strip all JSX and browser related stuff');\n      file.path.traverse(\n        {\n          // JSX can be replaced with a dummy value,\n          // but we have to do it after we processed template tags.\n          CallExpression: {\n            enter(p) {\n              if (isUnnecessaryReactCall(p)) {\n                JSXElementsRemover(p);\n              }\n            },\n          },\n          JSXElement: {\n            enter: JSXElementsRemover,\n          },\n          JSXFragment: {\n            enter: JSXElementsRemover,\n          },\n          MemberExpression(p, state) {\n            const obj = p.get('object');\n            const prop = p.get('property');\n            if (!obj.isIdentifier({ name: 'window' })) {\n              return;\n            }\n\n            const name = getPropertyName(prop);\n            if (!name) {\n              return;\n            }\n\n            state.windowScoped.add(name);\n            // eslint-disable-next-line no-param-reassign\n            state.globals = state.globals.filter((id) => {\n              if (id.node.name === name) {\n                removeWithRelated([id]);\n                return false;\n              }\n\n              return true;\n            });\n          },\n          MetaProperty(p) {\n            // Remove all references to `import.meta`\n            removeWithRelated([p]);\n          },\n          Identifier(p, state) {\n            if (p.find((parent) => parent.isTSTypeReference())) {\n              // don't mess with TS type references\n              return;\n            }\n            if (isBrowserGlobal(p)) {\n              if (\n                p.find(\n                  (parentPath) =>\n                    parentPath.isUnaryExpression({ operator: 'typeof' }) ||\n                    parentPath.isTSTypeQuery()\n                )\n              ) {\n                // Ignore `typeof window` expressions\n                return;\n              }\n\n              if (p.parentPath.isClassProperty()) {\n                // ignore class property decls\n                return;\n              }\n              if (p.parentPath.isMemberExpression() && p.key === 'property') {\n                // ignore e.g this.fetch()\n                // window.fetch will be handled by the windowScoped block below\n                return;\n              }\n\n              removeWithRelated([p]);\n\n              return;\n            }\n\n            if (state.windowScoped.has(p.node.name)) {\n              removeWithRelated([p]);\n            } else if (isGlobal(p)) {\n              state.globals.push(p);\n            }\n          },\n        },\n        {\n          globals: [] as NodePath<Identifier>[],\n          windowScoped: new Set<string>(),\n        }\n      );\n    },\n    visitor: {},\n    post(file: BabelFile) {\n      const log = createCustomDebug('preeval', getFileIdx(file.opts.filename!));\n\n      if (this.processors.length === 0) {\n        log('end', \"We didn't find any Linaria template literals\");\n\n        // We didn't find any Linaria template literals.\n        return;\n      }\n\n      this.file.metadata.linaria = {\n        processors: this.processors,\n        replacements: [],\n        rules: {},\n        dependencies: [],\n      };\n\n      const expressions: ExpressionValue['ex'][] = this.processors.flatMap(\n        (processor) => processor.dependencies.map((dependency) => dependency.ex)\n      );\n\n      const linariaPreval = file.path.scope.getData('__linariaPreval');\n      if (!linariaPreval) {\n        const linariaExport = t.expressionStatement(\n          t.assignmentExpression(\n            '=',\n            t.memberExpression(\n              t.identifier('exports'),\n              t.identifier('__linariaPreval')\n            ),\n            t.objectExpression(\n              expressions.map((ex) => t.objectProperty(ex, ex, false, true))\n            )\n          )\n        );\n\n        file.path.pushContainer('body', linariaExport);\n      }\n\n      log('end', '__linariaPreval has been added');\n    },\n  };\n}\n"],"mappings":"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"}