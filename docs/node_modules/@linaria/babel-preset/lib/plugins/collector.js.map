{"version":3,"file":"collector.js","names":["collector","babel","options","values","Map","name","pre","file","debug","opts","filename","processors","path","traverse","Identifier","p","processTemplateExpression","processor","build","doRuntimeReplacement","push","visitor","post","length","metadata","linaria","replacements","rules","dependencies","prevalExport","scope","getData","findParent","isExpressionStatement","removeWithRelated"],"sources":["../../src/plugins/collector.ts"],"sourcesContent":["/**\n * Collector traverses the AST and collects information about imports and\n * all Linaria template literals.\n */\n\nimport type { BabelFile, PluginObj } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\n\nimport { debug } from '@linaria/logger';\nimport type { StrictOptions } from '@linaria/utils';\nimport { removeWithRelated } from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { IPluginState, ValueCache } from '../types';\nimport processTemplateExpression from '../utils/processTemplateExpression';\n\nexport default function collector(\n  babel: Core,\n  options: StrictOptions & { values?: ValueCache }\n): PluginObj<IPluginState> {\n  const values = options.values ?? new Map<string, unknown>();\n  return {\n    name: '@linaria/babel/collector',\n    pre(file: BabelFile) {\n      debug('collect:start', file.opts.filename);\n\n      this.processors = [];\n\n      file.path.traverse({\n        // TODO: process transformed literals\n        Identifier: (p) => {\n          processTemplateExpression(p, file.opts, options, (processor) => {\n            processor.build(values);\n\n            processor.doRuntimeReplacement();\n            this.processors.push(processor);\n          });\n        },\n      });\n    },\n    visitor: {},\n    post(file: BabelFile) {\n      if (this.processors.length === 0) {\n        // We didn't find any Linaria template literals.\n        return;\n      }\n\n      this.file.metadata.linaria = {\n        processors: this.processors,\n        replacements: [],\n        rules: {},\n        dependencies: [],\n      };\n\n      // We can remove __linariaPreval export and all related code\n      const prevalExport = (\n        file.path.scope.getData('__linariaPreval') as NodePath | undefined\n      )?.findParent((p) => p.isExpressionStatement());\n      if (prevalExport) {\n        removeWithRelated([prevalExport]);\n      }\n\n      debug('collect:end', file.opts.filename);\n    },\n  };\n}\n"],"mappings":";;;;;;AAQA;AAEA;AAIA;AAA2E;AAd3E;AACA;AACA;AACA;;AAae,SAASA,SAAS,CAC/BC,KAAW,EACXC,OAAgD,EACvB;EAAA;EACzB,MAAMC,MAAM,sBAAGD,OAAO,CAACC,MAAM,6DAAI,IAAIC,GAAG,EAAmB;EAC3D,OAAO;IACLC,IAAI,EAAE,0BAA0B;IAChCC,GAAG,CAACC,IAAe,EAAE;MACnB,IAAAC,aAAK,EAAC,eAAe,EAAED,IAAI,CAACE,IAAI,CAACC,QAAQ,CAAC;MAE1C,IAAI,CAACC,UAAU,GAAG,EAAE;MAEpBJ,IAAI,CAACK,IAAI,CAACC,QAAQ,CAAC;QACjB;QACAC,UAAU,EAAGC,CAAC,IAAK;UACjB,IAAAC,kCAAyB,EAACD,CAAC,EAAER,IAAI,CAACE,IAAI,EAAEP,OAAO,EAAGe,SAAS,IAAK;YAC9DA,SAAS,CAACC,KAAK,CAACf,MAAM,CAAC;YAEvBc,SAAS,CAACE,oBAAoB,EAAE;YAChC,IAAI,CAACR,UAAU,CAACS,IAAI,CAACH,SAAS,CAAC;UACjC,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IACDI,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,CAACf,IAAe,EAAE;MAAA;MACpB,IAAI,IAAI,CAACI,UAAU,CAACY,MAAM,KAAK,CAAC,EAAE;QAChC;QACA;MACF;MAEA,IAAI,CAAChB,IAAI,CAACiB,QAAQ,CAACC,OAAO,GAAG;QAC3Bd,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3Be,YAAY,EAAE,EAAE;QAChBC,KAAK,EAAE,CAAC,CAAC;QACTC,YAAY,EAAE;MAChB,CAAC;;MAED;MACA,MAAMC,YAAY,4BAChBtB,IAAI,CAACK,IAAI,CAACkB,KAAK,CAACC,OAAO,CAAC,iBAAiB,CAAC,0DADvB,sBAElBC,UAAU,CAAEjB,CAAC,IAAKA,CAAC,CAACkB,qBAAqB,EAAE,CAAC;MAC/C,IAAIJ,YAAY,EAAE;QAChB,IAAAK,wBAAiB,EAAC,CAACL,YAAY,CAAC,CAAC;MACnC;MAEA,IAAArB,aAAK,EAAC,aAAa,EAAED,IAAI,CAACE,IAAI,CAACC,QAAQ,CAAC;IAC1C;EACF,CAAC;AACH"}