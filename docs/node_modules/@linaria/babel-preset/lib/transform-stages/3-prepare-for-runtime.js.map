{"version":3,"file":"3-prepare-for-runtime.js","names":["prepareForRuntime","babel","code","valueCache","options","babelConfig","pluginOptions","loadLinariaOptions","babelOptions","loadBabelOptions","filename","file","cachedParseSync","transformPlugins","require","resolve","values","transformConfig","buildOptions","envName","plugins","sourceMaps","sourceFileName","inputSourceMap","root","ast","babelrc","configFile","sourceType","result","transformFromAstSync","cwd","program","Error"],"sources":["../../src/transform-stages/3-prepare-for-runtime.ts"],"sourcesContent":["import type {\n  BabelFileResult,\n  PluginItem,\n  TransformOptions,\n} from '@babel/core';\n\nimport { buildOptions, loadBabelOptions } from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { Options, ValueCache } from '../types';\n\nimport cachedParseSync from './helpers/cachedParseSync';\nimport loadLinariaOptions from './helpers/loadLinariaOptions';\n\n/**\n * Parses the specified file, finds tags, applies run-time replacements,\n * removes dead code.\n */\nexport default function prepareForRuntime(\n  babel: Core,\n  code: string,\n  valueCache: ValueCache,\n  options: Options,\n  babelConfig: TransformOptions\n): BabelFileResult {\n  const pluginOptions = loadLinariaOptions(options.pluginOptions);\n  const babelOptions = loadBabelOptions(\n    babel,\n    options.filename,\n    pluginOptions?.babelOptions\n  );\n\n  const file = cachedParseSync(babel, code, babelOptions);\n\n  const transformPlugins: PluginItem[] = [\n    [\n      require.resolve('../plugins/collector'),\n      {\n        ...pluginOptions,\n        values: valueCache,\n      },\n    ],\n  ];\n\n  const transformConfig = buildOptions({\n    envName: 'linaria',\n    plugins: transformPlugins,\n    sourceMaps: true,\n    sourceFileName: babelConfig.filename ?? options.filename,\n    inputSourceMap: options.inputSourceMap,\n    root: options.root,\n    ast: true,\n    babelrc: false,\n    configFile: false,\n    sourceType: 'unambiguous',\n  });\n\n  const result = babel.transformFromAstSync(file, code, {\n    ...transformConfig,\n    cwd: babelConfig.cwd,\n    filename: babelConfig.filename ?? options.filename,\n  });\n\n  if (!result || !result.ast?.program) {\n    throw new Error('Babel transform failed');\n  }\n\n  return result;\n}\n"],"mappings":";;;;;;AAMA;AAKA;AACA;AAA8D;AAE9D;AACA;AACA;AACA;AACe,SAASA,iBAAiB,CACvCC,KAAW,EACXC,IAAY,EACZC,UAAsB,EACtBC,OAAgB,EAChBC,WAA6B,EACZ;EAAA;EACjB,MAAMC,aAAa,GAAG,IAAAC,2BAAkB,EAACH,OAAO,CAACE,aAAa,CAAC;EAC/D,MAAME,YAAY,GAAG,IAAAC,uBAAgB,EACnCR,KAAK,EACLG,OAAO,CAACM,QAAQ,EAChBJ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEE,YAAY,CAC5B;EAED,MAAMG,IAAI,GAAG,IAAAC,wBAAe,EAACX,KAAK,EAAEC,IAAI,EAAEM,YAAY,CAAC;EAEvD,MAAMK,gBAA8B,GAAG,CACrC,CACEC,OAAO,CAACC,OAAO,CAAC,sBAAsB,CAAC,EACvC;IACE,GAAGT,aAAa;IAChBU,MAAM,EAAEb;EACV,CAAC,CACF,CACF;EAED,MAAMc,eAAe,GAAG,IAAAC,mBAAY,EAAC;IACnCC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAEP,gBAAgB;IACzBQ,UAAU,EAAE,IAAI;IAChBC,cAAc,2BAAEjB,WAAW,CAACK,QAAQ,yEAAIN,OAAO,CAACM,QAAQ;IACxDa,cAAc,EAAEnB,OAAO,CAACmB,cAAc;IACtCC,IAAI,EAAEpB,OAAO,CAACoB,IAAI;IAClBC,GAAG,EAAE,IAAI;IACTC,OAAO,EAAE,KAAK;IACdC,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG5B,KAAK,CAAC6B,oBAAoB,CAACnB,IAAI,EAAET,IAAI,EAAE;IACpD,GAAGe,eAAe;IAClBc,GAAG,EAAE1B,WAAW,CAAC0B,GAAG;IACpBrB,QAAQ,4BAAEL,WAAW,CAACK,QAAQ,2EAAIN,OAAO,CAACM;EAC5C,CAAC,CAAC;EAEF,IAAI,CAACmB,MAAM,IAAI,iBAACA,MAAM,CAACJ,GAAG,wCAAV,YAAYO,OAAO,GAAE;IACnC,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,OAAOJ,MAAM;AACf"}