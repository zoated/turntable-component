{"version":3,"file":"4-extract.js","names":["STYLIS_DECLARATION","posixSep","path","posix","sep","transformUrl","url","outputFilename","sourceFilename","platformPath","relative","dirname","resolve","split","join","extractCssFromAst","rules","originalCode","options","mappings","cssText","preprocessor","selector","text","stylis","use","context","decl","replace","match","p1","p2","p3","p4","filename","Object","keys","forEach","index","push","generated","line","column","original","start","name","source","atom","cssSourceMapText","length","generator","SourceMapGenerator","file","mapping","addMapping","setSourceContent","toString","extractStage","processors","allRules","allReplacements","processor","artifacts","artifact","replacements"],"sources":["../../src/transform-stages/4-extract.ts"],"sourcesContent":["import path from 'path';\n\nimport type { Mapping } from 'source-map';\nimport { SourceMapGenerator } from 'source-map';\nimport stylis from 'stylis';\n\nimport type { BaseProcessor, Replacements } from '@linaria/tags';\n\nimport type { Rules, Options, PreprocessorFn } from '../types';\n\nconst STYLIS_DECLARATION = 1;\nconst posixSep = path.posix.sep;\n\nexport function transformUrl(\n  url: string,\n  outputFilename: string,\n  sourceFilename: string,\n  platformPath: typeof path = path\n) {\n  // Replace asset path with new path relative to the output CSS\n  const relative = platformPath.relative(\n    platformPath.dirname(outputFilename),\n    // Get the absolute path to the asset from the path relative to the JS file\n    platformPath.resolve(platformPath.dirname(sourceFilename), url)\n  );\n\n  if (platformPath.sep === posixSep) {\n    return relative;\n  }\n\n  return relative.split(platformPath.sep).join(posixSep);\n}\n\nfunction extractCssFromAst(\n  rules: Rules,\n  originalCode: string,\n  options: Options\n) {\n  const mappings: Mapping[] = [];\n\n  let cssText = '';\n\n  let preprocessor: PreprocessorFn;\n  if (typeof options.preprocessor === 'function') {\n    // eslint-disable-next-line prefer-destructuring\n    preprocessor = options.preprocessor;\n  } else {\n    switch (options.preprocessor) {\n      case 'none':\n        preprocessor = (selector, text) => `${selector} {${text}}\\n`;\n        break;\n      case 'stylis':\n      default:\n        stylis.use(null)((context, decl) => {\n          const { outputFilename } = options;\n          if (context === STYLIS_DECLARATION && outputFilename) {\n            // When writing to a file, we need to adjust the relative paths inside url(..) expressions\n            // It'll allow css-loader to resolve an imported asset properly\n            return decl.replace(\n              /\\b(url\\(([\"']?))(\\.[^)]+?)(\\2\\))/g,\n              (match, p1, p2, p3, p4) =>\n                p1 + transformUrl(p3, outputFilename, options.filename) + p4\n            );\n          }\n\n          return decl;\n        });\n\n        preprocessor = stylis;\n    }\n  }\n\n  Object.keys(rules).forEach((selector, index) => {\n    mappings.push({\n      generated: {\n        line: index + 1,\n        column: 0,\n      },\n      original: rules[selector].start!,\n      name: selector,\n      source: '',\n    });\n\n    if (rules[selector].atom) {\n      // For atoms, we just directly insert cssText, to give the atomizer full control over the rules\n      cssText += `${rules[selector].cssText}\\n`;\n    } else {\n      // Run each rule through stylis to support nesting\n      cssText += `${preprocessor(selector, rules[selector].cssText)}\\n`;\n    }\n  });\n\n  return {\n    cssText,\n    rules,\n\n    get cssSourceMapText() {\n      if (mappings?.length) {\n        const generator = new SourceMapGenerator({\n          file: options.filename.replace(/\\.js$/, '.css'),\n        });\n\n        mappings.forEach((mapping) =>\n          generator.addMapping({ ...mapping, source: options.filename })\n        );\n\n        generator.setSourceContent(options.filename, originalCode);\n\n        return generator.toString();\n      }\n\n      return '';\n    },\n  };\n}\n\n/**\n * Extract artifacts (e.g. CSS) from processors\n */\nexport default function extractStage(\n  processors: BaseProcessor[],\n  originalCode: string,\n  options: Options\n) {\n  let allRules: Rules = {};\n  const allReplacements: Replacements = [];\n  processors.forEach((processor) => {\n    processor.artifacts.forEach((artifact) => {\n      if (artifact[0] !== 'css') return;\n      const [rules, replacements] = artifact[1] as [\n        rules: Rules,\n        sourceMapReplacements: Replacements\n      ];\n\n      allRules = {\n        ...allRules,\n        ...rules,\n      };\n\n      allReplacements.push(...replacements);\n    });\n  });\n\n  return {\n    ...extractCssFromAst(allRules, originalCode, options),\n    replacements: allReplacements,\n  };\n}\n"],"mappings":"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"}