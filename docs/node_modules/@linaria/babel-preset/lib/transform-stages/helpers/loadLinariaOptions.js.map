{"version":3,"file":"loadLinariaOptions.js","names":["explorerSync","cosmiconfigSync","cache","WeakMap","defaultOverrides","nodeModulesRegExp","loadLinariaOptions","overrides","has","get","configFile","ignore","rules","babelOptions","rest","result","undefined","load","search","options","displayName","evaluate","extensions","action","require","resolve","test","filename","code","config","set"],"sources":["../../../src/transform-stages/helpers/loadLinariaOptions.ts"],"sourcesContent":["import { cosmiconfigSync } from 'cosmiconfig';\n\nimport type { StrictOptions } from '@linaria/utils';\n\nimport type { Stage } from '../../types';\n\nexport type PluginOptions = StrictOptions & {\n  configFile?: string;\n  stage?: Stage;\n};\n\nconst explorerSync = cosmiconfigSync('linaria');\n\nconst cache = new WeakMap<Partial<PluginOptions>, StrictOptions>();\nconst defaultOverrides = {};\nconst nodeModulesRegExp = /[\\\\/]node_modules[\\\\/]/;\n\nexport default function loadLinariaOptions(\n  overrides: Partial<PluginOptions> = defaultOverrides\n): StrictOptions {\n  if (cache.has(overrides)) {\n    return cache.get(overrides)!;\n  }\n\n  const { configFile, ignore, rules, babelOptions = {}, ...rest } = overrides;\n\n  const result =\n    configFile !== undefined\n      ? explorerSync.load(configFile)\n      : explorerSync.search();\n\n  const options = {\n    displayName: false,\n    evaluate: true,\n    extensions: ['.cjs', '.json', '.js', '.jsx', '.mjs', '.ts', '.tsx'],\n    rules: rules ?? [\n      {\n        action: require.resolve('@linaria/shaker'),\n      },\n      {\n        // The old `ignore` option is used as a default value for `ignore` rule.\n        test: ignore ?? nodeModulesRegExp,\n        action: 'ignore',\n      },\n      {\n        // Do not ignore ES-modules\n        test: (filename, code) => {\n          if (!nodeModulesRegExp.test(filename)) {\n            return false;\n          }\n\n          // If a file contains `export` or `import` keywords, we assume it's an ES-module\n          return /\\b(?:export|import)\\b/.test(code);\n        },\n        action: require.resolve('@linaria/shaker'),\n      },\n    ],\n    babelOptions,\n    ...(result ? result.config : null),\n    ...rest,\n  };\n\n  cache.set(overrides, options);\n\n  return options;\n}\n"],"mappings":";;;;;;AAAA;AAWA,MAAMA,YAAY,GAAG,IAAAC,4BAAe,EAAC,SAAS,CAAC;AAE/C,MAAMC,KAAK,GAAG,IAAIC,OAAO,EAAyC;AAClE,MAAMC,gBAAgB,GAAG,CAAC,CAAC;AAC3B,MAAMC,iBAAiB,GAAG,wBAAwB;AAEnC,SAASC,kBAAkB,CACxCC,SAAiC,GAAGH,gBAAgB,EACrC;EACf,IAAIF,KAAK,CAACM,GAAG,CAACD,SAAS,CAAC,EAAE;IACxB,OAAOL,KAAK,CAACO,GAAG,CAACF,SAAS,CAAC;EAC7B;EAEA,MAAM;IAAEG,UAAU;IAAEC,MAAM;IAAEC,KAAK;IAAEC,YAAY,GAAG,CAAC,CAAC;IAAE,GAAGC;EAAK,CAAC,GAAGP,SAAS;EAE3E,MAAMQ,MAAM,GACVL,UAAU,KAAKM,SAAS,GACpBhB,YAAY,CAACiB,IAAI,CAACP,UAAU,CAAC,GAC7BV,YAAY,CAACkB,MAAM,EAAE;EAE3B,MAAMC,OAAO,GAAG;IACdC,WAAW,EAAE,KAAK;IAClBC,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;IACnEV,KAAK,EAAEA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,CACd;MACEW,MAAM,EAAEC,OAAO,CAACC,OAAO,CAAC,iBAAiB;IAC3C,CAAC,EACD;MACE;MACAC,IAAI,EAAEf,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIN,iBAAiB;MACjCkB,MAAM,EAAE;IACV,CAAC,EACD;MACE;MACAG,IAAI,EAAE,CAACC,QAAQ,EAAEC,IAAI,KAAK;QACxB,IAAI,CAACvB,iBAAiB,CAACqB,IAAI,CAACC,QAAQ,CAAC,EAAE;UACrC,OAAO,KAAK;QACd;;QAEA;QACA,OAAO,uBAAuB,CAACD,IAAI,CAACE,IAAI,CAAC;MAC3C,CAAC;MACDL,MAAM,EAAEC,OAAO,CAACC,OAAO,CAAC,iBAAiB;IAC3C,CAAC,CACF;IACDZ,YAAY;IACZ,IAAIE,MAAM,GAAGA,MAAM,CAACc,MAAM,GAAG,IAAI,CAAC;IAClC,GAAGf;EACL,CAAC;EAEDZ,KAAK,CAAC4B,GAAG,CAACvB,SAAS,EAAEY,OAAO,CAAC;EAE7B,OAAOA,OAAO;AAChB"}