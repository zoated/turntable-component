{"version":3,"file":"index.js","names":["isEnabled","caller","name","evaluate","linaria","babel","options","debug","JSON","stringify","plugins","transform","loadLinariaOptions"],"sources":["../src/index.ts"],"sourcesContent":["/**\n * File defines babel prest for Linaria.\n * It uses ./extract function that is an entry point for styles extraction.\n * It also bypass babel options defined in Linaria config file with it's defaults (see ./utils/loadOptions).\n */\nimport type { ConfigAPI, TransformCaller } from '@babel/core';\n\nimport { debug } from '@linaria/logger';\n\nimport transform from './plugins/babel-transform';\nimport type { PluginOptions } from './transform-stages/helpers/loadLinariaOptions';\nimport loadLinariaOptions from './transform-stages/helpers/loadLinariaOptions';\n\nexport { slugify } from '@linaria/utils';\n\nexport { default as preeval } from './plugins/preeval';\nexport * from './utils/collectTemplateDependencies';\nexport { default as collectTemplateDependencies } from './utils/collectTemplateDependencies';\nexport { default as withLinariaMetadata } from './utils/withLinariaMetadata';\nexport { default as Module, DefaultModuleImplementation } from './module';\nexport { default as transform } from './transform';\nexport * from './types';\nexport { default as loadLinariaOptions } from './transform-stages/helpers/loadLinariaOptions';\nexport type { PluginOptions } from './transform-stages/helpers/loadLinariaOptions';\nexport { prepareCode } from './transform-stages/1-prepare-for-eval';\nexport { transformUrl } from './transform-stages/4-extract';\nexport { default as isNode } from './utils/isNode';\nexport { default as getTagProcessor } from './utils/getTagProcessor';\nexport { default as getVisitorKeys } from './utils/getVisitorKeys';\nexport type { VisitorKeys } from './utils/getVisitorKeys';\nexport { default as peek } from './utils/peek';\nexport { default as processTemplateExpression } from './utils/processTemplateExpression';\nexport { TransformCacheCollection } from './cache';\n\nfunction isEnabled(caller?: TransformCaller & { evaluate?: true }) {\n  return caller?.name !== 'linaria' || caller.evaluate === true;\n}\n\nexport default function linaria(babel: ConfigAPI, options: PluginOptions) {\n  if (!babel.caller(isEnabled)) {\n    return {};\n  }\n  debug('options', JSON.stringify(options));\n  return {\n    plugins: [[transform, loadLinariaOptions(options)]],\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAmD;AAAA;AAAA;AAhCnD;AACA;AACA;AACA;AACA;;AA8BA,SAASA,SAAS,CAACC,MAA8C,EAAE;EACjE,OAAO,CAAAA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,IAAI,MAAK,SAAS,IAAID,MAAM,CAACE,QAAQ,KAAK,IAAI;AAC/D;AAEe,SAASC,OAAO,CAACC,KAAgB,EAAEC,OAAsB,EAAE;EACxE,IAAI,CAACD,KAAK,CAACJ,MAAM,CAACD,SAAS,CAAC,EAAE;IAC5B,OAAO,CAAC,CAAC;EACX;EACA,IAAAO,aAAK,EAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,CAAC;EACzC,OAAO;IACLI,OAAO,EAAE,CAAC,CAACC,uBAAS,EAAE,IAAAC,2BAAkB,EAACN,OAAO,CAAC,CAAC;EACpD,CAAC;AACH"}