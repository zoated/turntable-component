{"version":3,"file":"processTemplateExpression.js","names":["processed","WeakSet","processTemplateExpression","p","fileContext","options","emit","parentPath","isExportSpecifier","has","node","tagProcessor","getTagProcessor","add"],"sources":["../../src/utils/processTemplateExpression.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type { Identifier } from '@babel/types';\n\nimport type { BaseProcessor, IFileContext } from '@linaria/tags';\nimport type { StrictOptions } from '@linaria/utils';\n\nimport getTagProcessor from './getTagProcessor';\n\nconst processed = new WeakSet<Identifier>();\n\nconst processTemplateExpression = (\n  p: NodePath<Identifier>,\n  fileContext: IFileContext,\n  options: Pick<\n    StrictOptions,\n    'classNameSlug' | 'displayName' | 'evaluate' | 'tagResolver'\n  >,\n  emit: (processor: BaseProcessor) => void\n) => {\n  if (p.parentPath.isExportSpecifier()) return;\n  if (processed.has(p.node)) return;\n\n  const tagProcessor = getTagProcessor(p, fileContext, options);\n\n  processed.add(p.node);\n\n  if (tagProcessor === null) return;\n\n  emit(tagProcessor);\n};\n\nexport default processTemplateExpression;\n"],"mappings":";;;;;;AAMA;AAAgD;AAEhD,MAAMA,SAAS,GAAG,IAAIC,OAAO,EAAc;AAE3C,MAAMC,yBAAyB,GAAG,CAChCC,CAAuB,EACvBC,WAAyB,EACzBC,OAGC,EACDC,IAAwC,KACrC;EACH,IAAIH,CAAC,CAACI,UAAU,CAACC,iBAAiB,EAAE,EAAE;EACtC,IAAIR,SAAS,CAACS,GAAG,CAACN,CAAC,CAACO,IAAI,CAAC,EAAE;EAE3B,MAAMC,YAAY,GAAG,IAAAC,wBAAe,EAACT,CAAC,EAAEC,WAAW,EAAEC,OAAO,CAAC;EAE7DL,SAAS,CAACa,GAAG,CAACV,CAAC,CAACO,IAAI,CAAC;EAErB,IAAIC,YAAY,KAAK,IAAI,EAAE;EAE3BL,IAAI,CAACK,YAAY,CAAC;AACpB,CAAC;AAAC,eAEaT,yBAAyB;AAAA"}