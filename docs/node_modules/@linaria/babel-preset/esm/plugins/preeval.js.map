{"version":3,"file":"preeval.js","names":["createCustomDebug","JSXElementsRemover","getFileIdx","isUnnecessaryReactCall","nonType","removeWithRelated","processTemplateExpression","isGlobal","id","scope","name","node","hasBinding","hasGlobal","forbiddenGlobals","Set","isBrowserGlobal","has","getPropertyName","path","isIdentifier","isStringLiteral","value","preeval","babel","options","types","t","pre","file","log","opts","filename","processors","traverse","Identifier","p","processor","doEvaltimeReplacement","push","CallExpression","enter","JSXElement","JSXFragment","MemberExpression","state","obj","get","prop","windowScoped","add","globals","filter","MetaProperty","find","parent","isTSTypeReference","parentPath","isUnaryExpression","operator","isTSTypeQuery","isClassProperty","isMemberExpression","key","visitor","post","length","metadata","linaria","replacements","rules","dependencies","expressions","flatMap","map","dependency","ex","linariaPreval","getData","linariaExport","expressionStatement","assignmentExpression","memberExpression","identifier","objectExpression","objectProperty","pushContainer"],"sources":["../../src/plugins/preeval.ts"],"sourcesContent":["/**\n * This file is a babel preset used to transform files inside evaluators.\n * It works the same as main `babel/extract` preset, but do not evaluate lazy dependencies.\n */\nimport type { BabelFile, NodePath, PluginObj } from '@babel/core';\nimport type { Identifier } from '@babel/types';\n\nimport { createCustomDebug } from '@linaria/logger';\nimport type { ExpressionValue } from '@linaria/tags';\nimport type { StrictOptions } from '@linaria/utils';\nimport {\n  JSXElementsRemover,\n  getFileIdx,\n  isUnnecessaryReactCall,\n  nonType,\n  removeWithRelated,\n} from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { IPluginState } from '../types';\nimport processTemplateExpression from '../utils/processTemplateExpression';\n\nexport type PreevalOptions = Pick<\n  StrictOptions,\n  'classNameSlug' | 'displayName' | 'evaluate'\n>;\n\nconst isGlobal = (id: NodePath<Identifier>): boolean => {\n  if (!nonType(id)) {\n    return false;\n  }\n\n  const { scope } = id;\n  const { name } = id.node;\n  return !scope.hasBinding(name) && scope.hasGlobal(name);\n};\n\nconst forbiddenGlobals = new Set([\n  'XMLHttpRequest',\n  'clearImmediate',\n  'clearInterval',\n  'clearTimeout',\n  'document',\n  'fetch',\n  'localStorage',\n  'location',\n  'navigator',\n  'sessionStorage',\n  'setImmediate',\n  'setInterval',\n  'setTimeout',\n  'window',\n]);\n\nconst isBrowserGlobal = (id: NodePath<Identifier>) => {\n  return forbiddenGlobals.has(id.node.name) && isGlobal(id);\n};\n\nconst getPropertyName = (path: NodePath): string | null => {\n  if (path.isIdentifier()) {\n    return path.node.name;\n  }\n\n  if (path.isStringLiteral()) {\n    return path.node.value;\n  }\n\n  return null;\n};\n\nexport default function preeval(\n  babel: Core,\n  options: PreevalOptions\n): PluginObj<IPluginState> {\n  const { types: t } = babel;\n  return {\n    name: '@linaria/babel/preeval',\n    pre(file: BabelFile) {\n      const log = createCustomDebug('preeval', getFileIdx(file.opts.filename!));\n\n      log('start', 'Looking for template literalsâ€¦');\n\n      this.processors = [];\n\n      file.path.traverse({\n        Identifier: (p) => {\n          processTemplateExpression(p, file.opts, options, (processor) => {\n            processor.doEvaltimeReplacement();\n            this.processors.push(processor);\n          });\n        },\n      });\n\n      log('start', 'Strip all JSX and browser related stuff');\n      file.path.traverse(\n        {\n          // JSX can be replaced with a dummy value,\n          // but we have to do it after we processed template tags.\n          CallExpression: {\n            enter(p) {\n              if (isUnnecessaryReactCall(p)) {\n                JSXElementsRemover(p);\n              }\n            },\n          },\n          JSXElement: {\n            enter: JSXElementsRemover,\n          },\n          JSXFragment: {\n            enter: JSXElementsRemover,\n          },\n          MemberExpression(p, state) {\n            const obj = p.get('object');\n            const prop = p.get('property');\n            if (!obj.isIdentifier({ name: 'window' })) {\n              return;\n            }\n\n            const name = getPropertyName(prop);\n            if (!name) {\n              return;\n            }\n\n            state.windowScoped.add(name);\n            // eslint-disable-next-line no-param-reassign\n            state.globals = state.globals.filter((id) => {\n              if (id.node.name === name) {\n                removeWithRelated([id]);\n                return false;\n              }\n\n              return true;\n            });\n          },\n          MetaProperty(p) {\n            // Remove all references to `import.meta`\n            removeWithRelated([p]);\n          },\n          Identifier(p, state) {\n            if (p.find((parent) => parent.isTSTypeReference())) {\n              // don't mess with TS type references\n              return;\n            }\n            if (isBrowserGlobal(p)) {\n              if (\n                p.find(\n                  (parentPath) =>\n                    parentPath.isUnaryExpression({ operator: 'typeof' }) ||\n                    parentPath.isTSTypeQuery()\n                )\n              ) {\n                // Ignore `typeof window` expressions\n                return;\n              }\n\n              if (p.parentPath.isClassProperty()) {\n                // ignore class property decls\n                return;\n              }\n              if (p.parentPath.isMemberExpression() && p.key === 'property') {\n                // ignore e.g this.fetch()\n                // window.fetch will be handled by the windowScoped block below\n                return;\n              }\n\n              removeWithRelated([p]);\n\n              return;\n            }\n\n            if (state.windowScoped.has(p.node.name)) {\n              removeWithRelated([p]);\n            } else if (isGlobal(p)) {\n              state.globals.push(p);\n            }\n          },\n        },\n        {\n          globals: [] as NodePath<Identifier>[],\n          windowScoped: new Set<string>(),\n        }\n      );\n    },\n    visitor: {},\n    post(file: BabelFile) {\n      const log = createCustomDebug('preeval', getFileIdx(file.opts.filename!));\n\n      if (this.processors.length === 0) {\n        log('end', \"We didn't find any Linaria template literals\");\n\n        // We didn't find any Linaria template literals.\n        return;\n      }\n\n      this.file.metadata.linaria = {\n        processors: this.processors,\n        replacements: [],\n        rules: {},\n        dependencies: [],\n      };\n\n      const expressions: ExpressionValue['ex'][] = this.processors.flatMap(\n        (processor) => processor.dependencies.map((dependency) => dependency.ex)\n      );\n\n      const linariaPreval = file.path.scope.getData('__linariaPreval');\n      if (!linariaPreval) {\n        const linariaExport = t.expressionStatement(\n          t.assignmentExpression(\n            '=',\n            t.memberExpression(\n              t.identifier('exports'),\n              t.identifier('__linariaPreval')\n            ),\n            t.objectExpression(\n              expressions.map((ex) => t.objectProperty(ex, ex, false, true))\n            )\n          )\n        );\n\n        file.path.pushContainer('body', linariaExport);\n      }\n\n      log('end', '__linariaPreval has been added');\n    },\n  };\n}\n"],"mappings":"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"}