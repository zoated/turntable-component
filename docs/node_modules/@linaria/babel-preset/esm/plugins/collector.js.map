{"version":3,"file":"collector.js","names":["debug","removeWithRelated","processTemplateExpression","collector","babel","options","values","Map","name","pre","file","opts","filename","processors","path","traverse","Identifier","p","processor","build","doRuntimeReplacement","push","visitor","post","length","metadata","linaria","replacements","rules","dependencies","prevalExport","scope","getData","findParent","isExpressionStatement"],"sources":["../../src/plugins/collector.ts"],"sourcesContent":["/**\n * Collector traverses the AST and collects information about imports and\n * all Linaria template literals.\n */\n\nimport type { BabelFile, PluginObj } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\n\nimport { debug } from '@linaria/logger';\nimport type { StrictOptions } from '@linaria/utils';\nimport { removeWithRelated } from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { IPluginState, ValueCache } from '../types';\nimport processTemplateExpression from '../utils/processTemplateExpression';\n\nexport default function collector(\n  babel: Core,\n  options: StrictOptions & { values?: ValueCache }\n): PluginObj<IPluginState> {\n  const values = options.values ?? new Map<string, unknown>();\n  return {\n    name: '@linaria/babel/collector',\n    pre(file: BabelFile) {\n      debug('collect:start', file.opts.filename);\n\n      this.processors = [];\n\n      file.path.traverse({\n        // TODO: process transformed literals\n        Identifier: (p) => {\n          processTemplateExpression(p, file.opts, options, (processor) => {\n            processor.build(values);\n\n            processor.doRuntimeReplacement();\n            this.processors.push(processor);\n          });\n        },\n      });\n    },\n    visitor: {},\n    post(file: BabelFile) {\n      if (this.processors.length === 0) {\n        // We didn't find any Linaria template literals.\n        return;\n      }\n\n      this.file.metadata.linaria = {\n        processors: this.processors,\n        replacements: [],\n        rules: {},\n        dependencies: [],\n      };\n\n      // We can remove __linariaPreval export and all related code\n      const prevalExport = (\n        file.path.scope.getData('__linariaPreval') as NodePath | undefined\n      )?.findParent((p) => p.isExpressionStatement());\n      if (prevalExport) {\n        removeWithRelated([prevalExport]);\n      }\n\n      debug('collect:end', file.opts.filename);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAKA,SAASA,KAAK,QAAQ,iBAAiB;AAEvC,SAASC,iBAAiB,QAAQ,gBAAgB;AAIlD,OAAOC,yBAAyB,MAAM,oCAAoC;AAE1E,eAAe,SAASC,SAAS,CAC/BC,KAAW,EACXC,OAAgD,EACvB;EACzB,MAAMC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,IAAIC,GAAG,EAAmB;EAC3D,OAAO;IACLC,IAAI,EAAE,0BAA0B;IAChCC,GAAG,CAACC,IAAe,EAAE;MACnBV,KAAK,CAAC,eAAe,EAAEU,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC;MAE1C,IAAI,CAACC,UAAU,GAAG,EAAE;MAEpBH,IAAI,CAACI,IAAI,CAACC,QAAQ,CAAC;QACjB;QACAC,UAAU,EAAGC,CAAC,IAAK;UACjBf,yBAAyB,CAACe,CAAC,EAAEP,IAAI,CAACC,IAAI,EAAEN,OAAO,EAAGa,SAAS,IAAK;YAC9DA,SAAS,CAACC,KAAK,CAACb,MAAM,CAAC;YAEvBY,SAAS,CAACE,oBAAoB,EAAE;YAChC,IAAI,CAACP,UAAU,CAACQ,IAAI,CAACH,SAAS,CAAC;UACjC,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IACDI,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,CAACb,IAAe,EAAE;MACpB,IAAI,IAAI,CAACG,UAAU,CAACW,MAAM,KAAK,CAAC,EAAE;QAChC;QACA;MACF;MAEA,IAAI,CAACd,IAAI,CAACe,QAAQ,CAACC,OAAO,GAAG;QAC3Bb,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3Bc,YAAY,EAAE,EAAE;QAChBC,KAAK,EAAE,CAAC,CAAC;QACTC,YAAY,EAAE;MAChB,CAAC;;MAED;MACA,MAAMC,YAAY,GAChBpB,IAAI,CAACI,IAAI,CAACiB,KAAK,CAACC,OAAO,CAAC,iBAAiB,CAAC,EACzCC,UAAU,CAAEhB,CAAC,IAAKA,CAAC,CAACiB,qBAAqB,EAAE,CAAC;MAC/C,IAAIJ,YAAY,EAAE;QAChB7B,iBAAiB,CAAC,CAAC6B,YAAY,CAAC,CAAC;MACnC;MAEA9B,KAAK,CAAC,aAAa,EAAEU,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC;IAC1C;EACF,CAAC;AACH"}