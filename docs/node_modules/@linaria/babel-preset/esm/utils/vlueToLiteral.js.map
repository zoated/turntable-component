{"version":3,"file":"vlueToLiteral.js","names":["isSerializable","getSource","valueToLiteral","value","ex","undefined","type","name","Array","isArray","elements","map","v","properties","Object","entries","key","match","computed","shorthand","buildCodeFrameError"],"sources":["../../src/utils/vlueToLiteral.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type { Expression } from '@babel/types';\n\nimport { isSerializable } from '@linaria/tags';\n\nimport getSource from './getSource';\n\nexport default function valueToLiteral(\n  value: unknown,\n  ex: NodePath\n): Expression {\n  if (value === undefined) {\n    return {\n      type: 'Identifier',\n      name: 'undefined',\n    };\n  }\n\n  if (isSerializable(value)) {\n    if (value === null) {\n      return {\n        type: 'NullLiteral',\n      };\n    }\n\n    if (typeof value === 'string') {\n      return {\n        type: 'StringLiteral',\n        value,\n      };\n    }\n\n    if (typeof value === 'number') {\n      return {\n        type: 'NumericLiteral',\n        value,\n      };\n    }\n\n    if (typeof value === 'boolean') {\n      return {\n        type: 'BooleanLiteral',\n        value,\n      };\n    }\n\n    if (Array.isArray(value)) {\n      return {\n        type: 'ArrayExpression',\n        elements: value.map((v) => valueToLiteral(v, ex)),\n      };\n    }\n\n    return {\n      type: 'ObjectExpression',\n      properties: Object.entries(value).map(([key, v]) => ({\n        type: 'ObjectProperty',\n        key: key.match(/^[a-zA-Z]\\w*$/)\n          ? {\n              type: 'Identifier',\n              name: key,\n            }\n          : {\n              type: 'StringLiteral',\n              value: key,\n            },\n        value: valueToLiteral(v, ex),\n        computed: false,\n        shorthand: false,\n      })),\n    };\n  }\n\n  throw ex.buildCodeFrameError(\n    `The expression evaluated to '${value}', which is probably a mistake. If you want it to be inserted into CSS, explicitly cast or transform the value to a string, e.g. - 'String(${getSource(\n      ex\n    )})'.`\n  );\n}\n"],"mappings":"AAGA,SAASA,cAAc,QAAQ,eAAe;AAE9C,OAAOC,SAAS,MAAM,aAAa;AAEnC,eAAe,SAASC,cAAc,CACpCC,KAAc,EACdC,EAAY,EACA;EACZ,IAAID,KAAK,KAAKE,SAAS,EAAE;IACvB,OAAO;MACLC,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAIP,cAAc,CAACG,KAAK,CAAC,EAAE;IACzB,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO;QACLG,IAAI,EAAE;MACR,CAAC;IACH;IAEA,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO;QACLG,IAAI,EAAE,eAAe;QACrBH;MACF,CAAC;IACH;IAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO;QACLG,IAAI,EAAE,gBAAgB;QACtBH;MACF,CAAC;IACH;IAEA,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;MAC9B,OAAO;QACLG,IAAI,EAAE,gBAAgB;QACtBH;MACF,CAAC;IACH;IAEA,IAAIK,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;MACxB,OAAO;QACLG,IAAI,EAAE,iBAAiB;QACvBI,QAAQ,EAAEP,KAAK,CAACQ,GAAG,CAAEC,CAAC,IAAKV,cAAc,CAACU,CAAC,EAAER,EAAE,CAAC;MAClD,CAAC;IACH;IAEA,OAAO;MACLE,IAAI,EAAE,kBAAkB;MACxBO,UAAU,EAAEC,MAAM,CAACC,OAAO,CAACZ,KAAK,CAAC,CAACQ,GAAG,CAAC,CAAC,CAACK,GAAG,EAAEJ,CAAC,CAAC,MAAM;QACnDN,IAAI,EAAE,gBAAgB;QACtBU,GAAG,EAAEA,GAAG,CAACC,KAAK,CAAC,eAAe,CAAC,GAC3B;UACEX,IAAI,EAAE,YAAY;UAClBC,IAAI,EAAES;QACR,CAAC,GACD;UACEV,IAAI,EAAE,eAAe;UACrBH,KAAK,EAAEa;QACT,CAAC;QACLb,KAAK,EAAED,cAAc,CAACU,CAAC,EAAER,EAAE,CAAC;QAC5Bc,QAAQ,EAAE,KAAK;QACfC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC;EACH;EAEA,MAAMf,EAAE,CAACgB,mBAAmB,CACzB,gCAA+BjB,KAAM,8IAA6IF,SAAS,CAC1LG,EAAE,CACF,KAAI,CACP;AACH"}