{"version":3,"file":"collectTemplateDependencies.js","names":["statement","cloneNode","debug","hasMeta","findIdentifiers","mutate","reference","referenceAll","ValueType","getSource","valueToLiteral","createId","name","loc","type","staticEval","ex","evaluate","undefined","result","confident","value","expressionDeclarationTpl","preserveComments","unsupported","reason","buildCodeFrameError","isIdentifier","getUidInRootScope","path","node","rootScope","scope","getProgramParent","hasBinding","generateUid","hoistVariableDeclarator","parent","referencedIdentifiers","forEach","identifier","hoistIdentifier","bindingIdentifiers","newName","rename","statementInRoot","findParent","p","parentPath","isProgram","declaration","kind","declarations","inserted","insertBefore","registerDeclaration","idPath","isReferenced","binding","getBinding","includes","bindingPath","isVariableDeclarator","getOrAddLinariaPreval","object","getData","prevalExport","expression","operator","left","property","computed","right","properties","programPath","pushContainer","get","setData","addIdentifierToLinariaPreval","newProperty","key","shorthand","extractExpression","addToExport","isLiteral","CONST","isFunction","isFunctionExpression","isArrowFunctionExpression","expUid","evaluated","id","evaluatedId","replaceWith","FUNCTION","LAZY","expId","callee","arguments","collectTemplateDependencies","quasi","quasis","expressions","length","expressionValues","map","bind","source","isExpression","extracted"],"sources":["../../src/utils/collectTemplateDependencies.ts"],"sourcesContent":["/* eslint @typescript-eslint/no-use-before-define: [\"error\", { \"functions\": false }] */\n\n/**\n * This file is a visitor that checks TaggedTemplateExpressions and look for Linaria css or styled templates.\n * For each template it makes a list of dependencies, try to evaluate expressions, and if it is not possible, mark them as lazy dependencies.\n */\n\nimport { statement } from '@babel/template';\nimport type { NodePath, Scope } from '@babel/traverse';\nimport type {\n  Expression,\n  ExpressionStatement,\n  Identifier,\n  JSXIdentifier,\n  ObjectExpression,\n  ObjectProperty,\n  Program,\n  SourceLocation,\n  Statement,\n  TaggedTemplateExpression,\n  TemplateElement,\n  TSType,\n  VariableDeclaration,\n  VariableDeclarator,\n} from '@babel/types';\nimport { cloneNode } from '@babel/types';\n\nimport { debug } from '@linaria/logger';\nimport type { ConstValue } from '@linaria/tags';\nimport { hasMeta } from '@linaria/tags';\nimport {\n  findIdentifiers,\n  mutate,\n  reference,\n  referenceAll,\n} from '@linaria/utils';\n\nimport type { ExpressionValue } from '../types';\nimport { ValueType } from '../types';\n\nimport getSource from './getSource';\nimport valueToLiteral from './vlueToLiteral';\n\nconst createId = (name: string, loc?: SourceLocation | null): Identifier => ({\n  type: 'Identifier',\n  name,\n  loc,\n});\n\nfunction staticEval(\n  ex: NodePath<Expression>,\n  evaluate = false\n): [unknown] | undefined {\n  if (!evaluate) return undefined;\n\n  const result = ex.evaluate();\n  if (result.confident && !hasMeta(result.value)) {\n    return [result.value];\n  }\n\n  return undefined;\n}\n\nconst expressionDeclarationTpl = statement(\n  'const %%expId%% = /*#__PURE__*/ () => %%expression%%',\n  {\n    preserveComments: true,\n  }\n);\n\nconst unsupported = (ex: NodePath, reason?: string): Error =>\n  ex.buildCodeFrameError(\n    `This ${\n      ex.isIdentifier() ? 'identifier' : 'expression'\n    } cannot be used in the template${reason ? `, because it ${reason}` : ''}.`\n  );\n\nfunction getUidInRootScope(path: NodePath<Identifier | JSXIdentifier>): string {\n  const { name } = path.node;\n  const rootScope = path.scope.getProgramParent();\n  if (rootScope.hasBinding(name)) {\n    return rootScope.generateUid(name);\n  }\n\n  return name;\n}\n\nfunction hoistVariableDeclarator(ex: NodePath<VariableDeclarator>) {\n  if (!ex.scope.parent) {\n    // It is already in the root scope\n    return;\n  }\n\n  const referencedIdentifiers = findIdentifiers([ex], 'referenced');\n  referencedIdentifiers.forEach((identifier) => {\n    if (identifier.isIdentifier()) {\n      hoistIdentifier(identifier);\n    }\n  });\n\n  const bindingIdentifiers = findIdentifiers([ex], 'binding');\n\n  bindingIdentifiers.forEach((path) => {\n    const newName = getUidInRootScope(path);\n    if (newName !== path.node.name) {\n      path.scope.rename(path.node.name, newName);\n    }\n  });\n\n  const rootScope = ex.scope.getProgramParent();\n\n  const statementInRoot = ex.findParent(\n    (p) => p.parentPath?.isProgram() === true\n  ) as NodePath<Statement>;\n\n  const declaration: VariableDeclaration = {\n    type: 'VariableDeclaration',\n    kind: 'let',\n    declarations: [cloneNode(ex.node)],\n  };\n\n  const [inserted] = statementInRoot.insertBefore(declaration);\n  referenceAll(inserted);\n  rootScope.registerDeclaration(inserted);\n}\n\nfunction hoistIdentifier(idPath: NodePath<Identifier>): void {\n  if (!idPath.isReferenced()) {\n    throw unsupported(idPath);\n  }\n\n  const binding = idPath.scope.getBinding(idPath.node.name);\n  if (!binding) {\n    // It's something strange\n    throw unsupported(idPath, 'is undefined');\n  }\n\n  if (binding.kind === 'module') {\n    // Modules are global by default\n    return;\n  }\n\n  if (!['var', 'let', 'const', 'hoisted'].includes(binding.kind)) {\n    // This is not a variable, we can't hoist it\n    throw unsupported(binding.path, 'is a function parameter');\n  }\n\n  const { scope, path: bindingPath } = binding;\n  // parent here can be null or undefined in different versions of babel\n  if (!scope.parent) {\n    // The variable is already in the root scope\n    return;\n  }\n\n  if (bindingPath.isVariableDeclarator()) {\n    hoistVariableDeclarator(bindingPath);\n\n    return;\n  }\n\n  throw unsupported(idPath);\n}\n\nfunction getOrAddLinariaPreval(scope: Scope): NodePath<ObjectExpression> {\n  const rootScope = scope.getProgramParent();\n  let object = rootScope.getData('__linariaPreval');\n  if (object) {\n    return object;\n  }\n\n  const prevalExport: ExpressionStatement = {\n    type: 'ExpressionStatement',\n    expression: {\n      type: 'AssignmentExpression',\n      operator: '=',\n      left: {\n        type: 'MemberExpression',\n        object: createId('exports'),\n        property: createId('__linariaPreval'),\n        computed: false,\n      },\n      right: {\n        type: 'ObjectExpression',\n        properties: [],\n      },\n    },\n  };\n\n  const programPath = rootScope.path as NodePath<Program>;\n  const [inserted] = programPath.pushContainer('body', [prevalExport]);\n  object = inserted.get('expression.right') as NodePath<ObjectExpression>;\n  rootScope.setData('__linariaPreval', object);\n  return object;\n}\n\nfunction addIdentifierToLinariaPreval(scope: Scope, name: string) {\n  const rootScope = scope.getProgramParent();\n  const object = getOrAddLinariaPreval(rootScope);\n  const newProperty: ObjectProperty = {\n    type: 'ObjectProperty',\n    key: createId(name),\n    value: createId(name),\n    computed: false,\n    shorthand: false,\n  };\n\n  const [inserted] = object.pushContainer('properties', [newProperty]);\n  reference(inserted.get('value') as NodePath<Identifier>);\n}\n\n/**\n * Only an expression that can be evaluated in the root scope can be\n * used in a Linaria template. This function tries to hoist the expression.\n * @param ex The expression to hoist.\n * @param evaluate If true, we try to statically evaluate the expression.\n * @param addToExport If true, we add the expression to the __linariaPreval.\n */\nexport function extractExpression(\n  ex: NodePath<Expression>,\n  evaluate = false,\n  addToExport = true\n): Omit<ExpressionValue, 'buildCodeFrameError' | 'source'> {\n  if (\n    ex.isLiteral() &&\n    ('value' in ex.node || ex.node.type === 'NullLiteral')\n  ) {\n    return {\n      ex: ex.node,\n      kind: ValueType.CONST,\n      value: ex.node.type === 'NullLiteral' ? null : ex.node.value,\n    } as Omit<ConstValue, 'buildCodeFrameError' | 'source'>;\n  }\n\n  const { loc } = ex.node;\n\n  const rootScope = ex.scope.getProgramParent();\n  const statementInRoot = ex.findParent(\n    (p) => p.parentPath?.isProgram() === true\n  ) as NodePath<Statement>;\n\n  const isFunction =\n    ex.isFunctionExpression() || ex.isArrowFunctionExpression();\n\n  // Generate next _expN name\n  const expUid = rootScope.generateUid('exp');\n\n  const evaluated = staticEval(ex, evaluate);\n\n  if (!evaluated) {\n    // If expression is not statically evaluable,\n    // we need to hoist all its referenced identifiers\n\n    // Collect all referenced identifiers\n    findIdentifiers([ex], 'referenced').forEach((id) => {\n      if (!id.isIdentifier()) return;\n\n      // Try to evaluate and inline them…\n      const evaluatedId = staticEval(id, evaluate);\n      if (evaluatedId) {\n        mutate(id, (p) => {\n          p.replaceWith(valueToLiteral(evaluatedId[0], ex));\n        });\n      } else {\n        // … or hoist them to the root scope\n        hoistIdentifier(id);\n      }\n    });\n  }\n\n  const kind = isFunction ? ValueType.FUNCTION : ValueType.LAZY;\n\n  // Declare _expN const with the lazy expression\n  const declaration = expressionDeclarationTpl({\n    expId: createId(expUid),\n    expression: evaluated\n      ? valueToLiteral(evaluated[0], ex)\n      : cloneNode(ex.node),\n  }) as VariableDeclaration;\n\n  // Insert the declaration as close as possible to the original expression\n  const [inserted] = statementInRoot.insertBefore(declaration);\n  referenceAll(inserted);\n  rootScope.registerDeclaration(inserted);\n\n  // Replace the expression with the _expN() call\n  mutate(ex, (p) => {\n    p.replaceWith({\n      type: 'CallExpression',\n      callee: createId(expUid),\n      arguments: [],\n    });\n  });\n\n  if (addToExport) {\n    addIdentifierToLinariaPreval(rootScope, expUid);\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  ex.node.loc = loc;\n\n  return {\n    kind,\n    ex: createId(expUid, loc),\n  };\n}\n\n/**\n * Collects, hoists, and makes lazy all expressions in the given template\n * If evaluate is true, it will try to evaluate the expressions\n */\nexport default function collectTemplateDependencies(\n  path: NodePath<TaggedTemplateExpression>,\n  evaluate = false\n): [quasis: TemplateElement[], expressionValues: ExpressionValue[]] {\n  const quasi = path.get('quasi');\n  const quasis = quasi.get('quasis');\n  const expressions = quasi.get('expressions');\n\n  debug('template-parse:identify-expressions', expressions.length);\n\n  const expressionValues: ExpressionValue[] = expressions.map(\n    (ex: NodePath<Expression | TSType>): ExpressionValue => {\n      const buildCodeFrameError = ex.buildCodeFrameError.bind(ex);\n      const source = getSource(ex);\n\n      if (!ex.isExpression()) {\n        throw buildCodeFrameError(\n          `The expression '${source}' is not supported.`\n        );\n      }\n\n      const extracted = extractExpression(ex, evaluate);\n\n      return {\n        ...extracted,\n        source,\n        buildCodeFrameError,\n      } as ExpressionValue;\n    }\n  );\n\n  return [quasis.map((p) => p.node), expressionValues];\n}\n"],"mappings":"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"}